#!/usr/bin/env bash

# default values
if [ -z "$CRAWLER_CONFIG_LOCATION" ]; then
    CRAWLER_CONFIG_LOCATION="$HOME/.local/cyral"
fi

# install dependences
# docker

# prep storage location
mkdir -p "$CRAWLER_CONFIG_LOCATION"

NL=$'\n'
crawlerConfigCpFile="$CRAWLER_CONFIG_LOCATION/controlplane.env"
cpVars="Api_Host API_GRPC_Port API_REST_Port Worker_ID"
repoVars="Name Type Host Port"
repoDatabaseTypes="sqlserver mysql postgresql redshift denodo snowflake oracle"
envVarPrefix="REPO_CRAWLER_"

## Menu Functions

inputMenu(){
    local options="$1"
    local allowNull="$2"
    local invalid
    len=$(echo "$options" | tr ' ' '\n' | awk '{print length}' | sort -unr | head -n1)
    while true; do
        msg=$(echo -e "${invalid}\nSelection: ")
        read -r -n"${len}" -p "$msg" selection
        if [[ " $options " == *" $selection "* || ( -n "$allowNull" && -z "$selection") ]]; then
            echo "$selection"
            break
        fi
        invalid=$'\x0aInvalid Option!'
    done
}

PAK(){
    read -n1 -r -p "Press any key"
}

headerMenu(){
    clear
    subMsg="$1"
    div="==============================="
    echo "Cyral Repo Crawler Configurator"
    echo "$div"
    [ -n "$subMsg" ] && printf "%*s\n" $(( (${#subMsg} + ${#div}) / 2)) "$subMsg"
    echo ""
}

mainMenu(){
    while true; do
        headerMenu "Main Menu"
        echo " 1) View/Set Control Plane Configuration"
        echo " 2) View/Set Repo Configurations"
        echo " q) Quit"
        case $(inputMenu "1 2 q") in
            "1") controlPlaneMenu ;;
            "2") repoMenu ;;
            "q") clear; break ;;
        esac
    done
    printf "\nThanks!\n"
}

deleteConfig(){
    # used to cleanup both Repo and Db configs
    repoId="$1"
    db="$2"
    jobId=$(getJobId "$repoId" "$db")
    headerMenu "Delete ${repoId}${db:+ - $db}"
    read -n1 -r -p "Confirm Delete? (y/N)" confirm
    if [ "${confirm,,}" = 'y' ]; then
        rm "$CRAWLER_CONFIG_LOCATION/${jobId}.env"
        deleteSchedule "$repoId" "$db"
    fi
}

## Control Plane management

controlPlaneMenu(){
    while true; do
        headerMenu "Control Plane Configuration"
        echo " 1) Show Configuration"
        echo " 2) Set Configuration"
        echo " q) Quit/Back"
        case $(inputMenu "1 2 q") in
            "1") showControlPlaneConfig ;;
            "2") getControlPlaneConfig ;;
            "q") return;;
        esac
    done
}

showControlPlaneConfig(){
    headerMenu "Control Plane Configuration"
    loadControlPlaneConfig
    for v in $cpVars; do
        local varMsg
        local configVarValue
        varMsg=$(echo "$v" | tr "_" " ")
        configVarValue=$(eval "echo \"\${${envVarPrefix}CYRAL_${v^^}}\"")
        printf "%15s: %s\n" "$varMsg" "$configVarValue"
    done
    showControlPlaneAuth
    read -n1 -r -p "Press any key to return"
}

showControlPlaneAuth(){
    arn=$(eval "echo \"\$${envVarPrefix}CYRAL_CREDS_SECRET_ARN\"")
    if [[ -n "$arn" ]]; then
        # user provided
        printf "%15s: %s\n" "Secret ARN" "$arn"
    else
        clientId=$(eval echo "\$${envVarPrefix}CYRAL_CLIENT_ID")
        printf "%15s: %s\n" "Client ID" "$clientId"
        printf "%15s: %s\n" "Client Secret" "********"
    fi
}

getControlPlaneConfig(){
    headerMenu "Set Control Plane"
    loadControlPlaneConfig
    configContent=""
    
    for v in $cpVars; do
        local varMsg
        local configVar
        local localVar
        varMsg=$(echo "$v" | tr "_" " ")
        configVar="${envVarPrefix}CYRAL_${v^^}"
        configVarValue=$(eval "echo \$$configVar")

        if [[ "$configVar^^" == *"PORT"* && -z "$configVarValue" ]]; then
            configVarValue="443"
        fi

        while true; do
            read -r -p "${varMsg}${configVarValue:+ ($configVarValue)}: " localVar
            if [[ -n "$localVar"  ]]; then
                eval "$configVar=$localVar"
                configVarValue="$localVar"
                break
            elif [[ -z "$localVar" && -n "$configVarValue" ]]; then
                break
            else
                echo "Cant be blank!"
            fi
        done
        configContent+="$configVar=${configVarValue}${NL}"
    done
    getControlPlaneAuth
    echo "$configContent" > "$crawlerConfigCpFile"
    read -r -n1 -p "Press any key to return"
}

getControlPlaneAuth(){
    local arn clientId clientSecret hasDefault clientDefault awsDefault
    arn=$(eval "echo \"\$${envVarPrefix}CYRAL_CREDS_SECRET_ARN\"")
    clientId=$(eval echo "\$${envVarPrefix}CYRAL_CLIENT_ID")
    clientSecret=$(eval echo "\$${envVarPrefix}CYRAL_CLIENT_SECRET")
    eval "unset ${envVarPrefix}CYRAL_CREDS_SECRET_ARN ${envVarPrefix}CYRAL_CLIENT_ID ${envVarPrefix}CYRAL_CLIENT_SECRET"
    if [ -n "$arn" ]; then
        hasDefault=true
        awsDefault=true

    elif [ -n "$clientId" ];then
        hasDefault=true
        clientDefault=true
    fi
    echo "Control Plane Credentials"
    echo " 1) AWS Secret${awsDefault:+ *}"
    echo " 2) User provided${clientDefault:+ *}"
    
    input=$(inputMenu "1 2" $hasDefault)
    echo ""
    
    if [[ "$input" = "1" ]] || [[ -z "$input" && $awsDefault ]]; then
        read -r -p "AWS Secret ARN${arn:+ ($arn)}: " newArn
        echo ""
        if [[ -n "$newArn" ]]; then
            arn="$newArn"
        fi
        eval "${envVarPrefix}CYRAL_CREDS_SECRET_ARN=$arn"
        configContent+="${envVarPrefix}CYRAL_CREDS_SECRET_ARN=${arn}${NL}"
    elif [[ "$input" = "2" ]] || [[ -z "$input" && $clientDefault ]]; then
        read -r -p "Client ID${clientId:+ ($clientId)}: " newClientId
        if [ -n "$newClientId" ]; then
            clientId="$newClientId"
        fi
        read -r -s -p "Client Secret${clientSecret:+ (*******)}: " newClientSecret
        if [ -n "$newClientSecret" ]; then
            clientSecret="$newClientSecret"
        fi
        echo ""
        eval "${envVarPrefix}CYRAL_CLIENT_ID=${arn}"
        configContent+="${envVarPrefix}CYRAL_CLIENT_ID=${clientId}${NL}"
        eval "${envVarPrefix}CYRAL_CLIENT_SECRET=${clientSecret}"
        configContent+="${envVarPrefix}CYRAL_CLIENT_SECRET=${clientSecret}${NL}"
    fi

}

loadControlPlaneConfig(){
    if [ -e "$crawlerConfigCpFile" ]; then
        source "$crawlerConfigCpFile"
    fi
}

## Repo Job Management
repoMenu(){
    while true; do
        repoFiles=($(find "$CRAWLER_CONFIG_LOCATION" -type f -name "repo.*" -printf "%f\n" | cut -d'.' -f2))
        headerMenu "Repo Job Configuration"
        echo " 1) Create Repo Crawler Schedule"
        i=1
        for f in "${repoFiles[@]}"; do
            ((i++))
            echo " $i) ${f//_/ }"
        done
        echo " q) Quit/Back"
        opt=$(inputMenu "q $(seq -s ' ' "$i")")
        case $opt in
            "1") addRepo ;;
            "q") return ;;
            *) 
                selection="${repoFiles[(($opt-2))]}"
                repoId="${selection// /_}"
                repoDetailsMenu  "$repoId";;
        esac
    done
}

repoDetailsMenu(){
    repoId="$1"
    source "$CRAWLER_CONFIG_LOCATION/repo.${repoId}.env"
    while true; do
        headerMenu "$repoId"
        echo " 1) Show Config"
        echo " 2) Edit"
        echo " 3) Delete"
        echo " 4) Database Discovery"
        echo " 5) Account Discovery"
        echo " q) Quit/Back"
        case $(inputMenu "q 1 2 3 4 5") in
            "1") showRepoConfig "$repoId" ;;
            "2") editRepoConfig "$repoId" ;;
            "3") deleteConfig "$repoId"; return ;;
            "4") ddMenu "$repoId" ;;
            "5") adMenu "$repoId" ;; 
            "q") return
        esac
    done
}

showRepoConfig(){
    repoId="$1"
    headerMenu "$repoId"
    for v in $repoVars; do
        local varMsg
        local configVarValue
        varMsg=$(echo "$v" | tr "_" " ")
        configVarValue=$(eval "echo \"\${${envVarPrefix}REPO_${v^^}}\"")
        printf "%8s: %s\n" "$varMsg" "$configVarValue"
    done
    showRepoAuth
    schedule=$(getSchedule "$repoId")
    if [ -z "$schedule" ]; then
        schedule="Not Set"
    fi
    printf "%8s: %s\n" "Schedule" "$schedule"
    PAK
}

showRepoAuth(){
    arn=$(eval "echo \"\$${envVarPrefix}REPO_CREDS_SECRET_ARN\"")
    if [[ -n "$arn" ]]; then
        # user provided
        printf "%8s: %s\n" "Secret ARN" "$arn"
    else
        repoUser=$(eval echo "\$${envVarPrefix}REPO_USER")
        printf "%8s: %s\n" "User" "$repoUser"
        printf "%8s: %s\n" "Password" "********"
    fi
}

getRepoConfig(){
    # this will populate all the config vars for exporting/saving
    configContent=""
    repoId="${1}"
    if [[ -z "$repoId" ]]; then
        headerMenu "Create Repo Job"
    else
        headerMenu "Edit ${repoId}"
    fi

    # crawler variables/config file
    for v in $repoVars; do
        local varMsg
        local configVar
        local localVar
        varMsg=$(echo "$v" | tr "_" " ")
        configVar="${envVarPrefix}REPO_${v^^}"
        configVarValue=$(eval "echo \$$configVar")

        case ${v,,} in
            "type") 
                i=0
                echo "Database Type"
                for dbType in $repoDatabaseTypes; do
                    local hasDefault isDefault
                    ((i++))
                    if [ "${dbType}" = "${configVarValue}" ]; then hasDefault="true";isDefault="true"; else unset isDefault; fi
                    echo " $i) $dbType${isDefault:+ *}"
                done
                selection=$(inputMenu "$(seq -s ' ' "$i")" "$hasDefault")
                if [ -n "$selection" ]; then
                    configVarValue=$(echo "$repoDatabaseTypes" | cut -d " " -f $((selection--)) )
                    eval "$configVar=$configVarValue" 
                fi
                if [[ "${configVarValue,,}" == "oracle" ]]; then
                    # Oracle requires a session name
                    sessionName=$(echo "$REPO_CRAWLER_REPO_ADVANCED" | cut -d: -f3 | cut -d'}' -f1)
                    echo ""
                    read -r -p "Session Name${sessionName:+ ($sessionName)}: " newSessionName
                    if [[ -n "$newSessionName" ]]; then
                        sessionName="$newSessionName"
                    fi
                    # The quotes get stripped on source, so we need to reset it even if it hasnt changed
                    advCfg="${envVarPrefix}REPO_ADVANCED={\"oracle\":{\"service-name\":\"$sessionName\"}}${NL}"
                    eval "$advCfg"
                    configContent+="$advCfg"
                fi

                echo ""
                ;;
            *)
                while true; do
                    read -r -p "${varMsg}${configVarValue:+ ($configVarValue)}: " localVar
                    if [[ -n "$localVar"  ]]; then
                        # Value provided, validate
                        if [[ "$localVar" == *" "* ]]; then
                            # no inputs support spaces
                            echo "Spaces arent allow"
                            continue
                        fi
                        if [[ "${v,,}" == "name" ]]; then
                            if [[ -n "$configVarValue" && "$configVarValue" != "$localVar" ]]; then
                                # if the name is a new value, make sure a file doesnt already exis so we dont overwrite a config
                                envFilePath="$CRAWLER_CONFIG_LOCATION/repo.${localVar}.env"
                                if [[ -e "$envFilePath" ]]; then
                                    echo "Name already in use, please select another."
                                    continue
                                fi 
                            fi
                            repoId="$localVar"
                        fi
                        eval "$configVar=$localVar"
                        configVarValue="$localVar"
                        break
                    elif [[ -z "$localVar" && -n "$configVarValue" ]]; then
                        break
                    else
                        echo "Cant be blank!"
                    fi
                done
                ;;
        esac
        configContent+="$configVar=$configVarValue${NL}"
    done
    getRepoAuth
    repoFilePath="$CRAWLER_CONFIG_LOCATION/repo.${repoId}.env"
    echo "$configContent" > "$repoFilePath"
    if [ $isNew ]; then
        echo ""
        read -r -n1 -p "Set schedule? (Y/n): " schedule
        if [[ -z "$schedule" || "${schedule,,}" == 'y' ]]; then
            setScheduleMenu "$repoId"
            return
        fi
    fi
    echo ""
    PAK
}

getRepoAuth(){
    local arn repoUser repoPassword hasDefault clientDefault awsDefault
    arn=$(eval "echo \"\$${envVarPrefix}REPO_CREDS_SECRET_ARN\"")
    repoUser=$(eval echo "\$${envVarPrefix}REPO_USER")
    repoPassword=$(eval echo "\$${envVarPrefix}REPO_PASSWORD")
    eval "unset ${envVarPrefix}REPO_CREDS_SECRET_ARN ${envVarPrefix}REPO_USER ${envVarPrefix}REPO_PASSWORD"
    if [ -n "$arn" ]; then
        hasDefault=true
        awsDefault=true

    elif [ -n "$repoUser" ];then
        hasDefault=true
        clientDefault=true
    fi
    echo "Control Plane Credentials"
    echo " 1) AWS Secret${awsDefault:+ *}"
    echo " 2) User provided${clientDefault:+ *}"
    
    input=$(inputMenu "1 2" $hasDefault)
    echo ""
    
    if [[ "$input" = "1" ]] || [[ -z "$input" && $awsDefault ]]; then
        read -r -p "AWS Secret ARN${arn:+ ($arn)}: " newArn
        echo ""
        if [[ -n "$newArn" ]]; then
            arn="$newArn"
        fi
        eval "${envVarPrefix}REPO_CREDS_SECRET_ARN=$arn"
        configContent+="${envVarPrefix}REPO_CREDS_SECRET_ARN=${arn}${NL}"
    elif [[ "$input" = "2" ]] || [[ -z "$input" && $clientDefault ]]; then
        read -r -p "User${repoUser:+ ($repoUser)}: " newRepoUser
        if [ -n "$newRepoUser" ]; then
            repoUser="$newRepoUser"
        fi
        read -r -s -p "Password${repoPassword:+ (*******)}: " newRepoPassword
        if [ -n "$newRepoPassword" ]; then
            repoPassword="$newRepoPassword"
        fi
        echo ""
        eval "${envVarPrefix}REPO_USER=${repoUser}"
        configContent+="${envVarPrefix}REPO_USER=${repoUser}${NL}"
        eval "${envVarPrefix}REPO_PASSWORD=${repoPassword}"
        configContent+="${envVarPrefix}REPO_PASSWORD=${repoPassword}${NL}"
    fi
}

addRepo(){
    unset "${envVarPrefix}REPO_CREDS_SECRET_ARN" "${envVarPrefix}REPO_USER" "${envVarPrefix}REPO_PASSWORD"
    for v in $repoVars; do
        eval "unset ${envVarPrefix}REPO_${v^^}"
    done
    getRepoConfig
}

editRepoConfig(){
    getRepoConfig "$1"
}

runConfig(){
    jobId="$1"
    dryRun="$2"
    jobPath="$CRAWLER_CONFIG_LOCATION/${jobId}.env"
    headerMenu "Running job $jobId"
    crawler-job "$jobPath" "$dryRun"
    PAK
}

# Database Discovery
ddMenu(){
    repoId="$1"
    headerMenu "Databases - $repoId"
    while true; do
    # Its possible the Repo name has a . in it, but not the DB, so rev it
    dbFiles=($(find "$CRAWLER_CONFIG_LOCATION" -type f -name "db.$repoId.*" -printf "%f\n" | rev | cut -d'.' -f2 | rev))
    headerMenu "$repoId - Database Jobs"
    echo " 1) Add Database"
    i=1
    for f in "${dbFiles[@]}"; do
        ((i++))
        echo " $i) ${f//_/ }"
    done
    echo " q) Quit/Back"
    opt=$(inputMenu "q $(seq -s ' ' "$i")")
    case $opt in
        "1") addDd "$1" ;;
        "q") return ;;
        *) 
            db="${dbFiles[(($opt-2))]}"
            ddDetailsMenu "$repoId" "$db";;
    esac
done
}
ddDetailsMenu(){
    repoId="$1"
    db="$2"
    source "$CRAWLER_CONFIG_LOCATION/db.${repoId}.${db}.env"
    while true; do
        headerMenu "${repoId} - ${db}"
        echo " 1) Show Schedule"
        echo " 2) Set Schedule"
        echo " 3) Delete"
        echo " 4) Dry Run"
        echo " 5) Run Now"
        echo " q) Quit/Back"
        case $(inputMenu "q 1 2 3 4 5") in
            "1") scheduleMenu "$repoId" "$db" ;;
            "2") setScheduleMenu "$repoId" "$db" ;;
            "3") deleteConfig "$repoId" "$db"; return ;;
            "4") runConfig "db.$repoId.$db" "dryrun" ;;
            "5") runConfig "db.$repoId.$db" ;; 
            "q") return
        esac
    done
}
addDd(){
    repoId="$1"
    headerMenu "$repoId - New Database"
    local invalid=""
    while true; do
        msg=$(echo -e "${invalid}\nDatabase Name: ")
        read -r -p "$msg" db
        jobId=$(getJobId "$repoId" "$db")
        filePath="$CRAWLER_CONFIG_LOCATION/$jobId.env"
        if [[ ! -e "$filePath" ]]; then
            echo "${envVarPrefix}REPO_DATABASE=$db" > "$filePath"
            ddDetailsMenu "$repoId" "$db"
            return
        fi
        invalid=$'\x0aName alread exists, please enter a unique value.'
    done
    
}
# Local Account Discovery

adMenu(){
    repoId=$1
    while true; do
        headerMenu "Account Discovery - $repoId"
        echo " 1) Show Schedule"
        echo " 2) Set Schedule"
        echo " 3) Dry Run"
        echo " 4) Run Now"
        echo " q) Quit/Back"
        case $(inputMenu "q 1 2 3 4") in
            "1") scheduleMenu "$repoId" ;;
            "2") setScheduleMenu "$repoId" ;;
            "3") runConfig "repo.$repoId" "dryrun" ;; 
            "4") runConfig "repo.$repoId" ;;
            "q") return
        esac
    done
}
## Cron Management

getJobId(){
    ## Returns
    repoId="$1"
    db="$2"
    if [[ -n "$db" ]]; then
        echo "db.${repoId}.${db}"
    else
        echo "repo.${repoId}"
    fi
}

scheduleMenu(){
    repoId="$1"
    db="$2"
    headerMenu "${repoId}${db:+ - $db} Schedule"
    schedule=$(getSchedule "$repoId" "$db")
    if [ -z "$schedule" ]; then
        schedule="Not Set"
    fi
    echo "Current Schedule: $schedule"
    read -r -n1 -p "Update schedule? (y/N): " update
    if [ "${update^^}" = "Y" ]; then
        setScheduleMenu "$repoId" "$db"
    fi
}

setScheduleMenu(){
    repoId="$1"
    db="$2"
    headerMenu "Set $repoId${db:+ - $db} Schedule"
    echo " 1) Daily"
    echo " 2) Weekly"
    echo " 3) Monthly"
    echo " 4) Custom"
    echo " 5) Remove Schedule"
    echo " q) Quit/Back"
    case $(inputMenu "q 1 2 3 4 5") in
        "1") schedule="@daily" ;;
        "2") schedule="@weekly" ;;
        "3") schedule="@monthly" ;;
        "4") echo "" 
             read -r -p "Cron Schedule: " schedule ;;
        "5") deleteSchedule "$repoId" "$db"; return ;;
        "q") return
    esac
    setSchedule "$schedule" "$repoId" "$db"
}

setSchedule(){
    schedule="$1"
    repoId="$2"
    db="$3"
    deleteSchedule "$repoId" "$db"
    jobId=$(getJobId "$repoId" "$db")
    crontab -l > cron_tmp
    echo "$schedule crawler-job \"$CRAWLER_CONFIG_LOCATION/$jobId.env\" > \"$CRAWLER_CONFIG_LOCATION/$jobId.log\"" >> cron_tmp
    crontab cron_tmp
    rm cron_tmp
    printf "\nJob Set!\n"
    PAK
}

getSchedule(){
    ## Returns
    repoId="$1"
    db="$2"
    jobId=$(getJobId "$repoId" "$db")
    entry=$(crontab -l 2>/dev/null | grep "$jobId.log\"\$")
    if [[ "$entry" =~ ^@ ]]; then
        schedule=$(echo "$entry" | cut -d' ' -f1)
    else
        schedule=$(echo "$entry" | cut -d' ' -f1-5)
    fi
    echo "$schedule"
}

deleteSchedule(){
    repoId="$1"
    db="$2"
    jobId=$(getJobId "$repoId" "$db")
    crontab -l 2>/dev/null | grep -v "$jobId.log\"\$" | crontab - 
}

mainMenu
