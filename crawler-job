#!/usr/bin/env bash
CRAWLER_VERSION="v0.11.1"
CRAWLER_IMAGE="public.ecr.aws/cyral/cyral-repo-crawler"
jobEnvFile=$1
if [[ "${2^^}" == "DRYRUN" ]]; then
    dryRun=$2
fi

if [ -d "$jobEnvFile" ]; then # directory is repo only (account discovery)
    configDir=$(dirname "$jobEnvFile")
    repoFile="$jobEnvFile/repo.config.env"
    jobTypeParam="-e REPO_CRAWLER_ACCOUNT_DISCOVERY=true -e REPO_CRAWLER_DATA_CLASSIFICATION=false -e REPO_CRAWLER_REPO_DATABASE=none"
else # otherwise its a file and thats databse discovery
    dbFile=$jobEnvFile
    repoFolder=$(dirname "$jobEnvFile")
    repoFile="$repoFolder/repo.config.env"
    configDir=$(dirname "$repoFolder")
    jobTypeParam=""
fi

cpEnvFile="$configDir/controlplane.env"

envParams="--env-file \"$cpEnvFile\" --env-file \"$repoFile\"${dbFile:+ --env-file "$dbFile"}"

if [ ! -r "$repoFile" ]; then
    echo "Unable to find repo file: '$repoFile'"
    exit 1
elif [[ -n "$dbFile" && ! -r "$dbFile" ]]; then
    echo "unable to access  database file: '$dbFile'"
elif [ -z "$cpEnvFile" ]; then
    echo "Unable to find Control Plan config file: '$cpEnvFile'"
    exit 1
fi

image="${CRAWLER_IMAGE}:${CRAWLER_VERSION}"

dockercmd="docker run --rm --network=${CRAWLER_NETWORK_MODE:-host} -v cyral_crawler:/db ${dryRun:+ -e REPO_CRAWLER_DRY_RUN=true} ${CRAWLER_LOG_LEVEL:+ -e REPO_CRAWLER_LOG_LEVEL=$CRAWLER_LOG_LEVEL} ${jobTypeParam} $envParams $image --cache-type sqlite --cache-sqlite-db-file-name /db/cache.db"
if ! sudoOutput=$(eval sudo -n "$dockercmd" 2>&1); then
    if ! stdOutput=$(eval "$dockercmd" 2>&1); then
        echo "FAILED to invoke crawler job!"
        echo "Sudo Attempt: $sudoOutput"
        echo "Standard Attempt: $stdOutput"
    else
        output="$stdOutput"
    fi
else
output="$sudoOutput"
fi
echo "$output"